// Package mocks содержит моки для тестирования серверного хранилища
package mocks

import (
	context "context"

	models "github.com/sanek1/metrics-collector/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// StorageHelper is an autogenerated mock type for the StorageHelper type
type StorageHelper struct {
	mock.Mock
}

// CollectorQuery provides a mock function with given fields: ctx, metrics
func (_m *StorageHelper) CollectorQuery(ctx context.Context, metrics []models.Metrics) (string, []string, []interface{}) {
	ret := _m.Called(ctx, metrics)

	if len(ret) == 0 {
		panic("no return value specified for CollectorQuery")
	}

	var r0 string
	var r1 []string
	var r2 []interface{}
	if rf, ok := ret.Get(0).(func(context.Context, []models.Metrics) (string, []string, []interface{})); ok {
		return rf(ctx, metrics)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.Metrics) string); ok {
		r0 = rf(ctx, metrics)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.Metrics) []string); ok {
		r1 = rf(ctx, metrics)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []models.Metrics) []interface{}); ok {
		r2 = rf(ctx, metrics)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]interface{})
		}
	}

	return r0, r1, r2
}

// EnsureMetricsTableExists provides a mock function with given fields: ctx
func (_m *StorageHelper) EnsureMetricsTableExists(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for EnsureMetricsTableExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterBatchesBeforeSaving provides a mock function with given fields: metrics
func (_m *StorageHelper) FilterBatchesBeforeSaving(metrics []models.Metrics) []models.Metrics {
	ret := _m.Called(metrics)

	if len(ret) == 0 {
		panic("no return value specified for FilterBatchesBeforeSaving")
	}

	var r0 []models.Metrics
	if rf, ok := ret.Get(0).(func([]models.Metrics) []models.Metrics); ok {
		r0 = rf(metrics)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Metrics)
		}
	}

	return r0
}

// GetMetricsOnDBs provides a mock function with given fields: ctx, _a1
func (_m *StorageHelper) GetMetricsOnDBs(ctx context.Context, _a1 ...models.Metrics) ([]*models.Metrics, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricsOnDBs")
	}

	var r0 []*models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...models.Metrics) ([]*models.Metrics, error)); ok {
		return rf(ctx, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...models.Metrics) []*models.Metrics); ok {
		r0 = rf(ctx, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...models.Metrics) error); ok {
		r1 = rf(ctx, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertMetric provides a mock function with given fields: ctx, _a1
func (_m *StorageHelper) InsertMetric(ctx context.Context, _a1 []models.Metrics) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertMetric")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Metrics) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetMetrics provides a mock function with given fields: ctx, _a1
func (_m *StorageHelper) SetMetrics(ctx context.Context, _a1 []models.Metrics) ([]*models.Metrics, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetMetrics")
	}

	var r0 []*models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Metrics) ([]*models.Metrics, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []models.Metrics) []*models.Metrics); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []models.Metrics) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SortingBatchData provides a mock function with given fields: existingMetrics, metrics
func (_m *StorageHelper) SortingBatchData(existingMetrics []*models.Metrics, metrics []models.Metrics) ([]models.Metrics, []models.Metrics) {
	ret := _m.Called(existingMetrics, metrics)

	if len(ret) == 0 {
		panic("no return value specified for SortingBatchData")
	}

	var r0 []models.Metrics
	var r1 []models.Metrics
	if rf, ok := ret.Get(0).(func([]*models.Metrics, []models.Metrics) ([]models.Metrics, []models.Metrics)); ok {
		return rf(existingMetrics, metrics)
	}
	if rf, ok := ret.Get(0).(func([]*models.Metrics, []models.Metrics) []models.Metrics); ok {
		r0 = rf(existingMetrics, metrics)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func([]*models.Metrics, []models.Metrics) []models.Metrics); ok {
		r1 = rf(existingMetrics, metrics)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]models.Metrics)
		}
	}

	return r0, r1
}

// UpdateMetrics provides a mock function with given fields: ctx, _a1
func (_m *StorageHelper) UpdateMetrics(ctx context.Context, _a1 []models.Metrics) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetrics")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []models.Metrics) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func NewStorageHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageHelper {
	mock := &StorageHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
