// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/sanek1/metrics-collector/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// GetAllMetrics provides a mock function with no fields
func (_m *Storage) GetAllMetrics() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllMetrics")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetMetrics provides a mock function with given fields: ctx, metricType, metricName
func (_m *Storage) GetMetrics(ctx context.Context, metricType string, metricName string) (*models.Metrics, bool) {
	ret := _m.Called(ctx, metricType, metricName)

	if len(ret) == 0 {
		panic("no return value specified for GetMetrics")
	}

	var r0 *models.Metrics
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Metrics, bool)); ok {
		return rf(ctx, metricType, metricName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Metrics); ok {
		r0 = rf(ctx, metricType, metricName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) bool); ok {
		r1 = rf(ctx, metricType, metricName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// SetCounter provides a mock function with given fields: ctx, _a1
func (_m *Storage) SetCounter(ctx context.Context, _a1 ...models.Metrics) ([]*models.Metrics, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetCounter")
	}

	var r0 []*models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...models.Metrics) ([]*models.Metrics, error)); ok {
		return rf(ctx, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...models.Metrics) []*models.Metrics); ok {
		r0 = rf(ctx, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...models.Metrics) error); ok {
		r1 = rf(ctx, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetGauge provides a mock function with given fields: ctx, _a1
func (_m *Storage) SetGauge(ctx context.Context, _a1 ...models.Metrics) ([]*models.Metrics, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetGauge")
	}

	var r0 []*models.Metrics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...models.Metrics) ([]*models.Metrics, error)); ok {
		return rf(ctx, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...models.Metrics) []*models.Metrics); ok {
		r0 = rf(ctx, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Metrics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...models.Metrics) error); ok {
		r1 = rf(ctx, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
