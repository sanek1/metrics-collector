// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// FileStorage is an autogenerated mock type for the FileStorage type
type FileStorage struct {
	mock.Mock
}

// LoadFromFile provides a mock function with given fields: fname
func (_m *FileStorage) LoadFromFile(fname string) error {
	ret := _m.Called(fname)

	if len(ret) == 0 {
		panic("no return value specified for LoadFromFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PeriodicallySaveBackUp provides a mock function with given fields: ctx, filename, restore, interval
func (_m *FileStorage) PeriodicallySaveBackUp(ctx context.Context, filename string, restore bool, interval time.Duration) {
	_m.Called(ctx, filename, restore, interval)
}

// SaveToFile provides a mock function with given fields: fname
func (_m *FileStorage) SaveToFile(fname string) error {
	ret := _m.Called(fname)

	if len(ret) == 0 {
		panic("no return value specified for SaveToFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fname)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFileStorage creates a new instance of FileStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileStorage {
	mock := &FileStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
